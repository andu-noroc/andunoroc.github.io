{"version":3,"sources":["layout.js","games.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Footer","Content","Sider","AndusLayout","children","className","theme","mode","defaultSelectedKeys","style","lineHeight","Item","key","padding","margin","background","minHeight","height","textAlign","Games","props","games","navigateToGame","link","e","window","open","map","game","console","log","name","poza","onClick","src","App","state","loading","setTimeout","setState","this","width","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAMQA,EAAmCC,IAAnCD,OAAQE,EAA2BD,IAA3BC,OAAeC,GAAYF,IAAnBG,MAAmBH,IAAZE,SA+BhBE,EA7BK,SAAC,GAAe,IAAdC,EAAa,EAAbA,SACpB,OACE,kBAAC,IAAD,CAAQC,UAAU,UAChB,kBAACP,EAAD,KACE,yBAAKO,UAAU,QAAf,KACA,kBAAC,IAAD,CACEC,MAAM,OACNC,KAAK,aACLC,oBAAqB,CAAC,KACtBC,MAAO,CAAEC,WAAY,SAErB,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KAAf,YAGJ,kBAACX,EAAD,CAASQ,MAAO,CAAEI,QAAS,WACzB,kBAAC,IAAD,CAAYJ,MAAO,CAAEK,OAAQ,WAC3B,kBAAC,IAAWH,KAAZ,aACA,kBAAC,IAAWA,KAAZ,eAEF,yBAAKF,MAAO,CAAEM,WAAY,OAAQF,QAAS,GAAIG,UAAW,IAAKC,OAAQ,SACpEb,IAGL,kBAACJ,EAAD,CAAQS,MAAO,CAAES,UAAW,WAA5B,mBCPSC,G,OArBD,SAACC,GAAW,IACjBC,EAAQD,EAARC,MAEDC,EAAiB,SAAAC,GAAI,OAAI,SAACC,GAC9BC,OAAOC,KAAKH,EAAM,YAGpB,OAAO,yBAAKlB,UAAU,SACpBgB,EAAMM,KAAI,SAAAC,GACRC,QAAQC,IAAI,OAAQF,GADL,IAERG,EAAoBH,EAApBG,KAAMR,EAAcK,EAAdL,KAAMS,EAAQJ,EAARI,KACnB,OACE,yBAAK3B,UAAU,OAAO4B,QAASX,EAAeC,IAC5C,yBAAKW,IAAKF,IACV,6BAAMD,UCTVV,EAAQ,CACZ,CACEE,KAAM,2EACNQ,KAAM,SACNC,KAAM,iLAER,CACET,KAAM,8CACNQ,KAAM,kBACNC,KAAM,qDAER,CACET,KAAM,8CACNQ,KAAM,iBACNC,KAAM,qDAER,CACET,KAAM,8CACNQ,KAAM,WACNC,KAAM,yGAER,CACET,KAAM,wCACNQ,KAAM,gBACNC,KAAM,8EA0BKG,E,2MAtBbC,MAAQ,CACNC,SAAS,G,mFAGU,IAAD,OAClBC,YAAW,WACT,EAAKC,SAAS,CACZF,SAAS,MAEV,O,+BAIH,OACE,yBAAKhC,UAAU,OACZmC,KAAKJ,MAAMC,SAAW,kBAAC,YAAD,CAAWI,MAAO,OACvCD,KAAKJ,MAAMC,SAAW,kBAAC,EAAD,KAAa,kBAAC,EAAD,CAAOhB,MAAOA,U,GAjBzCqB,IAAMC,WCvBJC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b8cf373c.chunk.js","sourcesContent":["import React from 'react';\n\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport {Breadcrumb, Layout, Menu} from 'antd';\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nconst AndusLayout = ({children})=> {\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\">A</div>\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          defaultSelectedKeys={['1']}\n          style={{ lineHeight: '64px' }}\n        >\n          <Menu.Item key=\"1\">Jocuri</Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '0 50px' }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Andu</Breadcrumb.Item>\n          <Breadcrumb.Item>lista</Breadcrumb.Item>\n        </Breadcrumb>\n        <div style={{ background: '#fff', padding: 24, minHeight: 280, height: '100%' }}>\n          {children}\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>\n        Creat de Andu</Footer>\n    </Layout>\n  );\n}\n\nexport default AndusLayout;","import React from 'react';\nimport './games.css';\n\nconst Games = (props) => {\n  const {games}= props;\n\n  const navigateToGame = link => (e)=> {\n    window.open(link, \"_blank\");\n  }\n\n  return <div className=\"games\">{\n    games.map(game=> {\n      console.log('game', game);\n      const {name, link, poza} = game;\n      return (\n        <div className=\"game\" onClick={navigateToGame(link)}>\n          <img src={poza}/>\n          <div>{name}</div>\n        </div>\n      )\n    })\n  }</div>\n}\n\nexport default Games;","import React from 'react';\nimport { BarLoader } from \"react-spinners\";\n\n\nimport './App.css';\nimport AndusLayout from \"./layout\";\nimport Games from './games';\n\nconst games = [\n  {\n    link: \"https://www.microsoft.com/ro-ro/p/roblox/9nblgggzm6wm?cid=msft_web_chart\",\n    name: \"Roblox\",\n    poza: \"https://store-images.s-microsoft.com/image/apps.17348.13510798883386282.19007972-a8b6-4cc7-ba5d-ba9311808f97.38c58d07-67ad-4e6e-922c-6d92e09b9aef?mode=scale&q=90&h=300&w=200\",\n  },\n  {\n    link: \"https://www.youtube.com/watch?v=XraipkEAp9g\",\n    name: \"Death Stranding\",\n    poza: \"https://i1.ytimg.com/vi/XraipkEAp9g/hqdefault.jpg\"\n  },\n  {\n    link: \"https://www.youtube.com/watch?v=XvG-EpPoCCA\",\n    name: \"The Last of Us\",\n    poza: \"https://i1.ytimg.com/vi/XvG-EpPoCCA/hqdefault.jpg\"\n  },\n  {\n    link: \"https://www.youtube.com/watch?v=9ymgYCVbJWg\",\n    name: \"MediEvil\",\n    poza: \"https://psmedia.playstation.com/is/image/psmedia/medievil-pack-01-ps4-en-26apr19_1556269487604?$Icon$\"\n  },\n  {\n    link: \"https://steamcommunity.com/app/387990\",\n    name: \"Scrap Mecanic\",\n    poza: \"https://steamcdn-a.akamaihd.net/steam/apps/387990/header.jpg?t=1545414761\"\n  },\n]\nclass App extends React.Component{\n  state = {\n    loading: true,\n  }\n\n  componentDidMount() {\n    setTimeout(()=> {\n      this.setState({\n        loading: false\n      })\n    }, 1000)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.loading && <BarLoader width={350}/> }\n        {!this.state.loading && <AndusLayout><Games games={games}/></AndusLayout>}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}